BLADE TEMPLATE.

#Intro

File blade template menggunakan extensi '.blade.php'.
File blade template biasanya disimpan di direktori 'resource/views'
View blade bisa di return langsung dari route ataupun method controller menggunakan global helper function 'view()'.
Seperti yang sudah dijelaskan pada materi view, kita bisa mengirimkan data ke view, dengan menjadikanya sebagai argument ke dua dari global helper function view(). contoh :

    Route::get('/test', function(){
        return view('test', ['data' => 'hello test']);
    });

#Menampilkan Data

Untuk menampilkan data di blade template, kita bisa gunakan tanda double kurung kurawal ({{  }}).
Sebagai contoh, misalkan data dikirim dari Route sebagai berikut :

    Route::get('/test', function(){
        return view('test', ['data' => 'hello test']);
    });

Selanjutnya untuk menampilkanya di view test.blade.php, kita bisa lakukan berikut :

    {{ data }}

Statement echo dari blade template yaitu double kurung kuraawal ({{  }}), secara otomatis akan menjalankan function 'htmlspecialchars()' untuk mencegah serangan XSS.
Selain itu, statement echo blade template juga bisa menampilkan hasil dari function php apapun. sehingga memungkinkan kita untuk menuliskan function php apapun di dalam statement echo blade template. contoh :

    hari ini tanggal {{ date("d-m-y") }}

#Mendaftarkan Components Package Secara manual.

saat kita ingin membangun package yang memanfaatkan component blade, kita harus mendaftarkan nama class, dan tag html alias secara manual ke dalam method boot dari service provider package.
cara mendaftarkanya ada 2 macam, yaitu menggunakan method 'component('tag-alias', NamaClass::class)'. contoh

Blade::component('alert', Alert::classs);

atau menggunakan componentNamepace('Contoh\\Namespace\\Random', 'tag-alias');

contoh cara menggunakanya : <x-alert/>
kelebihan dari method componentNamespace adalah ketika didalam package terdapat lebih dari 2 namespace kita bisa menggunakan semuanya. contoh :

<x-alert::alertsatu/>
<x-alert::alertdua/>

# Merender Component.

Untuk menampilkan component, kita bisa menggunakan tag component blade di salah satu template blade.
Tag component blade, dimulai dengan string 'x-' selanjutnya diikuti dengan nama class component yang ditulis dengan format camel-case. contoh :

    <x-alert/>

jika class component berada di direktori yang lebih dalam dari direktori 'app/View/Components', kita bisa menggunakan tanda titik (.) untuk mengindikasi direktori bersarang.
sebagai contoh, misal component input berada di direktori 'app/View/Components/Forms/Input.php', kita bisa merendernya dengan menuliskanya sebagai berikut :

    <x-forms.input/>
Jika kita ingin merender component secara kondisional, kita bisa melakukanya dengan mendefinisikan method 'shouldRender()' di dalam component class kita. Jika method shouldRender mengembalikan false, maka component tidak akan dirender. contoh :

    public function shouldRender(): bool
    {
        return Str::length($this->message)>0;
    }

# Index Components

Mungkin terkadang kita memiliki / ingin mengelompokan component yang cocok kedalam sebuah grup. contoh :

    App\View\Components\Card\Card
    App\View\Components\Card\Header
    App\View\Components\Card\Footer

saat kita lihat contoh diatas, mungkin kita berpikir bahwa untuk merender component 'card' kita harus menggunakan '<x-card.card/>'.
Tapi kita tidak harus melakukan hal tersebut, didalam laravel ketika nama component sama dengan nama direktori component, maka laravel secara otomatis akan menganggap nama component sebagai akar (root) dari component tersebut. dan memungkinkan kita untuk merender component tersebut tanpa perlu mengulang namanya. contoh :

    <x-card>
        <x-card.head>...</x-card.head>
        <x-card.footer>...</x-card.footer>
    </x-card>

# Mem-passing data ke Component.

Kita bisa memberikan / mem-passing data ke component menggunakan attribut string HTML yang mana harus diawali / menggunakan prefix karakter titik dua (:).
contoh :

    <x-alert :message="$message"/>

Selanjutnya kita harus mendefinisikan semua data attribute component ke constructor class.
Semua properti public dari component akan secara otomatis tersedia (available) di view component, tanpa harus kita mengirimkanya ke view melalui method render dari component.
contoh :

    namespace App\View\Components;

    use Illuminate\View\Component;
    use Illuminate\View\View;

    class Alert extends Component {

        public function __construct(
            public string $type,
            public string $message
        ) {}

        public function render()
        {
            return view('components.alert');
        }
    }

Selanjutnya jika kita ingin menampilkan konten dari variable public component, kita bisa meng-echokan nama variabel tersebut.
contoh :

    <div class"alert alert-{{ $type }}" >
        {{ $message }}
    </div>

# Case
Saat menuliskan argument constructor component, kita harus menggunakan format CamelCase, sedangkan disaat kita menuliskan nama argument didalam attribut HTML, gunakan format kebab-case.
contoh :

    public function __construct(stirng $alertType) {}

kemudian disaat kita ingin menggunakanya di attribut HTML, kita bisa menuliskanya sbb :

    <x-alert alert-type="danger" />

#Short Attribute Syntax
Saat kita mem-passing attribute ke component, kita juga bisa menggunakan syntax short attribute.
Ini lebih nyaman digunakan, karena nama attribute akan mencocokan nama variabel yang sesuai dengan mereka.
contoh :

    // ini menggunakan syntax short attribute
    <x-profile :$userId :$name />

    // syntax diatas, itu sama dengan syntax berikut :
    <x-profile :user-id = "$userId" :name = "$name" />

#Escaping Attribute Render
Beberapa Framework Javascript juga menggunakan awalan tanda titik dua (:).
Jika kita ingin memberitahu blade, bahwa attribute tersebut bukan merupakan expresion PHP, kita bisa menggunakan awalan double titik dua (::).
contoh :

    <x-button ::class={ danger: isDeleting } />
        Submit
    </x-button>

    kode diatas akan dirender menjadi :

    <button :class="{ danger: isDeleting }">
        Submit
    </button>

# Component method
Selain variabel public yang tersedia di template component, semua method public juga dapat dipanggil di template component.
contoh :

    misalkan kita punya method berikut :

    public function isSelected(string $option): bool
    {
        return $option === $this->selected;
    }

selanjutnya kita bisa memanggil method tersebut dari template component, dengan memanggilnya sebagai variabel dengan nama yang sesuai dengan nama method.
contoh :

    <option {{ $isSelected($value) ? 'selected' : '' }} value="{{ $value }}">
        {{ $label }}
    </option>

#Accessing Attributes & Slots Within Component class
Blade component memungkinkan kita untuk mengakses nama component, attribut, dan slot dari dalam method render dari class component.
Untuk bisa mengakses data tersebut, kita harus mengembalikan closure function didalam method render.
contoh :

    public function render(): Closure
    {
        return function() {
            return "<div {{ $attributes }}>Components content</div>":
        }
    }

Method render ini juga bisa menerima data yang berisi array, dimana data ini merupakan satu satunya argument dari method ini.
Data array berisi beberapa element yang menyediakan informasi tentang component.
contoh :

    public function render(): Closure
    {
        return function($data) {
            // $data['componentName'];
            // $data['attributes'];
            // $data['slot'];

            return "<div {{ $attributes }}>Components content</div>":
        }
    }

'componentName' itu sama dengan nama tag HTML yang ada setelah tanda 'x-'. contoh componentName untuk '<x-alert class="alert-success" id="alert" />' adalah 'alert'.
'attributes' itu berisi semua attribute yang ada di tag HTML, misal dalam contoh diatas adalah : ['class=>alert-success', 'id=>alert'].
'slot' adalah sebuah object 'Illuminate\Support\HtmlString' dengan dengan content dari component slot.
function closure harus mengembalikan string, lalu jika string yang dikembalikan itu sesuai dengan view yang ada, maka view tersebut akan di render, jika tidak maka string akan dirender sebagai blade view inline.

NOTE : Jangan pernah mengembed data element yang ada di $data secara langsung ke string yang di return oleh method render, karena hal tersebut dapat memungkinkan eksekusi kode jarak jauh melalui content attribut yang berbahaya.

# Dependencies Tambahan.
- Jika component kita membutuhkan dependencies dari service container, kita bisa me-list dependencies yang dibutuhkan sebelum setiap data attribute dari component kita.nantinya secara otomatis dependencies akan disuntikan ke container.
contoh :

    public function __construct(
        public AlertCreator $alertCreator;
        public string $type;
        public string $message;
    ){}

# Menyembunyikan Methods / Properties.
- Jika kita ingin mencegah method / properti public kita terekspos sebagai variabel di template component kita, kita bisa menambahkanya ke properti array $expect dari component kita.
contoh :

    class Alert extends Components
    {
        // masukan properti / method yang ingin kita hide
        protected $expect = ['type'];

        public function __construct(
            public string $type;
        ){}
    }

# Attribute Components
 - Semua attribute HTML yang tidak didefinisikan di constructor dari class component, akan tersedia di 'attribute bag' dari component. Dan bisa diakses melalui variabel $attributes. Semua attribute dapat dirender didalam component dengan meng-echo variabel ini.
 contoh :

    // component alert
    <x-alert :message="$message" type="error" class="mt-4" />

    // blade component
    <div {{ $attributes }} >
        <-- content compponent -->
    </div>

# Attributes Default / Merge
- Ketika kita mungkin ingin menentukan nilai default, atau menggabungkan beberapa nilai ke attributes component, kita bisa gunakan method 'merge()' dari attributes bag. Method ini sangat berguna khususnya untuk menetapkan seperangkat class CSS default yang harus selalu di terapkan ke sebuah component.
contoh :

    // misalkan kita punya component blade berikut :
    <div {{ $attributes->merge(['class' => 'alert alert-'. $type]) }} >
        {{ $message }}
    </div>

    // Jika kita asumsikan component di gunakan sebagai berikut :
    <x-alert type="error" :message="$messages" class="mb-4" />

    // maka hasil render nya adalah sebagai berikut :
    <div class="alert alert-error mb-4" >
        <!--- Content dari $message ---!>
    </div>

# Merge Class secara Kondisional.
- Ketika mungkin kita ingin menggabungkan(merge) class berdasarkan kondisi tertentu, 'true' misalnya. Kita bisa gunakan method 'class()' dari attributes bags.
- Method ini menerima sebuah argument berupa data array, yang mana key-nya berupa list class yang ingin di merge, dan value-nya adalah expresion boolean(true/false).
- Jika array key, berupa numeric, maka dia akan selalu disertakan ketika class di render.
- contoh :

    <div {{ $attributes->class(['p-4', 'bg-red' => $hasErrors]) }} >
        {{ $messages }}
    </div>

- Selanjutnya, jika kita ingin me-merge(menggabungkan) attribute lain ke component, kita bisa merangkaikan method 'merge()' ke method 'class()'.
- contoh :

    <div {{ $attributes->class(['p-4', 'bg-red' => $hasErrors])->merge(['type' => 'button']) }} >
        {{ $messages }}
    </div>

- Jika kita ingin meng-compile element HTML secara kondisional yang tidak menerima attributes 'merge', kita bisa menggunakan directive '@class'.

# Menggabungkan Attribute Non Class
- Ketika kita melakukan penggabungan (merging) terhadap attribute yang bukan class, maka nilai yang disediakan untuk atrribute tersebut akan dipertimbangkan sebagai nilai default.
- Dan tidak seperti attribute class, yang akan menggabungkan nilai yang ada dengan nilai yang disuntikan, attribute non-class akan mengoverwrite(menimpa) nilai yang ada dengan nilai yang disuntikan / diberikan.
- contoh :

    // misalkan kita punya blade component berikut :
    <div {{ $attributes->merge(['type' => 'button']) }}>
        {{ $slot }}
    </div>

    // selanjutnya kita ingin mengcustom tipe button menjadi type submit misalkan, kita bisa tentukan saat menggunakan component, contoh :
    <x-button type="submit">
        Submit
    </x-button>

    // maka hasil yang akan dirender :
    <button type="submit">
        Submit
    </button>

- Jika kita ingin attribute selain attribute class juga memiliki nilai default, yang tidak akan di overwrite ketika ada nilai yang diinject-an ke dalam attributes tersebut maka kamu bisa menggunakan method 'prepends()'.
- contoh :

    // pada contoh berikut, attribute method-controller akan selalu memiliki nilai default 'profile-controller' dan nilai tambahan yang diinject-an ke attribute tersebut akan di letakan setelah nilai defaultnya yaitu 'profile-controller'.
    <div {{ $attributes->merge(['data-controller' => $attributes->prepends('profile-controller')]) }}>
        {{ $slot }}
    </div>

# Menerima & Memfilter Attributes.
- Jika kita ingin memfilter attributes, kita bisa menggunakan method 'filter()'.
- Method ini menerima sebuah function closure, yang mana harus mengembalikan boolean 'true' jika kita ingin attributes-nya tetap dipertahankan di attributes bags / variabel $attributes.
- contoh :

    // contoh blade template
    <div {{ $attributes->filter(fn(string $value, string $key) => $key == 'foo') }}>
        {{ $slot }}
    </div>

    // contoh penggunaan component
    <x-component foo="bar" class="mb-4" id="testId" />

    // hasil render :
    <div foo="bar">
        <!-- content component --!>
    </div>

- Selain itu kita juga bisa mem-filter / mengambil attributes hanya yang memiliki awalan tertentu menggunakan method 'whereStartWith()'
- contoh :

    // contoh blade component
    <div {{ $attributes->whereStartWith('wire:') }} >
        {{ $slot }}
    </div>

    // contoh penggunaan component :
    <x-component wire:model="email" wire:loading.class="opacity-50" class="mb-4" />

    // hasi render :
    <div wire:model="email" wire:loading.class="opacity-50">
        <!-- content component --!>
    </div>

- Selanjutnya kita juga bisa mengecualikan attributes tertentu agar tidak disertakan, menggunakan method 'whereDoesntStartWith()'.
- contoh :

    // contoh blade component
    <div {{ $attributes->whereDoesntStartWith('wire:') }} >
        {{ $slot }}
    </div>

    // contoh penggunaan component :
    <x-component wire:model="email" wire:loading.class="opacity-50" class="mb-4" />

    // hasi render :
    <div class="mb-4">
        <!-- content component --!>
    </div>

- dengan method 'first()' kita bisa mengambil attributes pertama yang ada didalam attributes bag yang ada.
- contoh :

    // contoh blade component
    <div {{ $attributes->whereStartWith('wire:')->first() }} >
        {{ $slot }}
    </div>

    // contoh penggunaan component :
    <x-component wire:model="email" wire:loading.class="opacity-50" class="mb-4" />

    // hasi render :
    <div wire:model="email">
        <!-- content component --!>
    </div>

- selain itu kita juga bisa memeriksa apakah suatu attribute itu ada dalam sebuah component / tidak, yaitu dengan menggunakan method 'has()'.
- Method ini menerima sebuah argument berupa nama attribute, yang merupakan satu2nya argument-nya.
- method ini mengembalikan nilai boolean (true/false) yang akan mengindikasikan ada /tidaknya attribute dalam component tersebut.
- contoh :

    @if($attributes->has('class'))
        <div>Class attribute ada.</div>
    @endIf

- kemudian ketika method 'has()' diberikan argument berupa data array, yang berisi beberapa nama attributes, maka dia akan memeriksa apakah setiap nama attributes yang ada dalam array tersebut, ada didalam component.
- contoh :

    @if($attributes->has(['class', 'id']))
        <div>Semua attributes ada dalam component.</div>
    @endIf

- jika kita ingin memeriksa apakah salah satu dari attributes yang diberikan itu ada didalam component, kita bisa menggunakan method 'hasAny()'.
- contoh :

    @if($attributes->hasAny(['class', 'id', 'name']))
        <div>Salah satu attribute, ada dalam component.</div>
    @endIf

- lalu jika kita ingin mengambil nilai attribute tertentu, kita bisa menggunakan method 'get()'.
- contoh :

    {{ $attributes->get('class') }}

- method 'only()' bisa digunakan untuk mengambil attributes tertentu yang sesuai dengan key yang diberikan.
- contoh :

    {{ $attributes->only('class') }}
    // akan mengambil attributes dengan key / nama class

- terakhir jika kita ingin mengambil semua attributes dalam component, kecuali attributes tertentu, kita bisa menggunakan method 'except()'.
- contoh :

    {{ $attributes->except(['class']) }}
    // akan mengambil semua attributes kecuali attributes 'class'

# Keyword yang dicadangkan (Reserved Keyword).
- Terdapat beberapa keyword yang dicadangkan / tidak bisa kita gunakan untuk mendefinisikan properti public / nama method didalam component,karena keyword tersebut digunakan untuk penggunaan internal didalam blade.
- Berikut beberapa keyword yang dicadangkan / tidak bisa digunakan :

    - resolveView
    - view
    - shouldRender
    - render
    - withName
    - withAttributes
    - data

# Slots
- Slot digunakan untuk memberikan content tambahan ke component.
- Untuk merender slot, bisa dilakukan dengan meng-echokan $slot.
- contoh :

    <div class='alert alert-danger'>
        {{ $slot }}
    </div>

- Untuk memberikan data ke slot, kita bisa lakukan dengan menyuntikan content di dalam component.
- contoh :

    <x-alert>
        <strong>Bahaya !</strong> ini adalah peringatan bahaya.
    </x-alert>

- Terkadang juga sebuah component harus merender beberapa slots yang berbeda di lokasi yang berbeda didalam component.
- contoh :

    <span class="alert-title">{{ $title }}</span>

    <div class="alert alert-dangert">
        {{ $slot }}
    </div>

- kita bisa mendefinisikan konten dari slot yang memiliki nama (dalam contoh diatas adalah $title) menggunakan tag 'x-slot'.
- Setiap content yang tidak berada didalam tag 'x-slot' secara explisit, akan dimasukan ke dalam variabel $slot.
- dari blade component diatas, maka kita bisa menggunakan componentnya sbb :

    <x-alert>
        <x-slot:title>
            Server Error
        </x-slot>

        <strong>Error !</strong> terjadi kesalahan.
    </x-alert>

- Selanjutnya kita juga bisa memeriksa apakah suatu slot itu berisi content / tidak menggunakan method 'isEmpty()'.
- contoh :

    <span class="alert-title">{{ $title }}</span>

    <div class="alert alert-dangert">
        @if (isEmpty($slot))
            Ini adalah content default.
        @else
            {{ $slot }}
        @endIf
    </div>

- sebagai tambahan, kita juga bisa menggunakan method 'hasActualContent()' untuk menentukan apakah sebuah slot itu berisi konten actual, artinya content-nya bukan berupa sebuah comment HTML.
- contoh :

     <span class="alert-title">{{ $title }}</span>

    <div class="alert alert-dangert">
        @if (isEmpty($slot))
            @if($slot->hasActualContent())
                Konten ini tidak mengandung comment HTML.
            @endIf
            Ini adalah content default.
        @else
            {{ $slot }}
        @endIf
    </div>

# Scoped Slot
- Kita bisa mengakses properti dan atau method dari component didalam slot.
- Dengan syarat properti atau method dari component tersebut harus didefinisikan secara public.
- Selanjutnya kita bisa mengakses properti / method dari component melalui variabel '$component'.
- contoh :

    // misalkan component Alert disini memiliki method public formatAlert().
    <x-alert>
        <x-slot:title>
            {{ $component->formatAlert('Server Error') }}
        </x-slot>

            <strong>Error !</strong> terjadi kesalahan.
    </x-alert>

# Attributes Slot
- Seperti juga blade component, kita juga bisa memberikan attribute tambahan ke dalam slot, contoh nama class CSS.
- contoh :

    <x-alert>
        <x-slot:title class="mb-3 border">
            {{ $component->formatAlert('Server Error') }}
        </x-slot>

            <strong>Error !</strong> terjadi kesalahan.
    </x-alert>

- Untuk berinteraksi dengan attributes slot, bisa dilakukan dengan menggunakan properti attributes dari nama variabel slot.
- contoh :

    <div {{ $attributes->class(['border']) }}>
        <h3 {{ $heading->attributes->class(['fw-bold']) }}>
            {{ $heading }}
        </h3>

        {{ $slot }}

        <footer->attributes->class(['text-secondary'])>
            {{ $footer }}
        </footer>
    </div>

# Inline Component View
- Ketika sebuah component itu sangat kecil, tentu kurang praktis ketika kita harus mengatur class dan blade component. Untuk alasan ini, kita bisa langsung me-return kode html langsung dari blade component di method render dari class component.
- contoh :

    public function render()
    {
        return <<< 'blade'
            <div class="alert alert-danger">
                {{ $slot }}
            </div>
        blade;
    }

# Generate Inline View Component
- Untuk membuat inline view di component, kita bisa menambahkan option '--inline' pada saat menjalankan perintah artisan 'php artisan make:component.
- contoh :

    php artisan make:component Alert --inline

# Dynamic Component.
- Terkadang mungkin kita harus me-render sebuah component, akan tetapi kita tidak tahu component mana yang harus dirender, sampai saatnya runtime.
- Untuk mengatasi ini kita bisa menggunakan 'dynamic-component' dari component bawaan laravel untuk melakukan render, berdasarkan nilai / variabel yang diberikan.
- contoh :

    <x-dynamic-component :component="$componentName" class="mb-4"/>
