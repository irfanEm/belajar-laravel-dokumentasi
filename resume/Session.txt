# Intro
- Karena aplikasi yang digerakan oleh HTTP itu bersifat statelles, session menyediakan cara menyimpan informasi tentang user lintas request.
- Informasi tentang user ini biasanya disimpan di tempat yang kuat/ database, agar nantinya bisa diakses kembali di request selanjutnya.
- Laravel hadir dengan berbagai variasi backend session yang dapat diakses melalui API yang ekspresif dan terpadu.
- Selain itu juga mendukung backend populer seperti Memcached, Redis dan Database yang disertakan.

# Konfigurasi
- File konfigurasi session dari aplikasi laravel yang kita buat disimpan di 'config/session.php'. dan kita harus pastikan mereview-nya untuk bisa melihat semua opsi yang tersedia untuk kita.
- Secara default Laravel dikonfigurasikan untuk menggunakan session driver database.
- Session driver itu apa ? session driver adalah opsi yang mendefinisikan dimana kita akan menyimpan data session pada setiap rerquest.
- Laravel memiliki berbagai variasi session drivers :
    - File : Session akan disimpan di file di storage/framework/sessions
    - cookie : Session akan disimpan di cookie terenkripsi yang aman.
    - database : Session akan disimpan di database relational.
    - memcached / Redis : Session akan disimpan di salah satu cache berbasis penyimpanan yang cepat ini.
    - dynamoDB : Session akan disimpan di dynamoDB AWS.
    - array : Session akan disimpan di array PHP dan tidak akan dipertahankan (bersifat sementara).

- Driver array utamanya digunakan selama masa testing dan mencegah data session disimpan untuk dipertahankan.

# Prasyarat Driver
# Database
- Ketika kita ingin menggunakan session driver database, kita harus memastikan terlebih dahulu bahwa kita memiliki table database untuk menyimpan data session.
- Biasanya secara default Laravel akan menyertakan ini di migrasi database 0001_01_01_00000_create_users_table.php.
Tapi jika untuk alasan tertentu kita tidak memiliki table session, kita bisa men-generate-nya menggunakan perintah artisan 'make:session-table'. contoh :

    php artisan make:session-table

    php artisan migrate

# Redis
- Sebelum kita menggunakan Redis, kita harus memastikan terlebih dahulu bahwa kita telah menginstall extensi PHP PhpRedis melalui PECL atau, package predis/predis (~1.0) melalui composer.
- Untuk informasi lebih lanjut tentang redis, kita bisa membaca dokumentasi redis laravel.
- Variable environment SESSION_CONNECTION atau opsi connection di file konfigurasi session.php dapat digunakan untuk menentukan koneksi redis mana yang akan digunakan untuk penyimpanan session.

# Berinteraksi dengan Session.
# Mengambil data Session.
- Terdapat dua cara utama untuk mengambil data session, yaitu dengan menggunakan helper function 'session()' dan melalui object Request.
- Pertama mari kita lihat yang melalui object Request, yang mana bisa kita tuliskan / ketikan di function closure Route ataupun di method controller. dan ingat bahwa laravel secara otomatis akan menyuntikan dependencies method melalui service container. contoh :

    namespace App\Http\Controllers;

    use Illuminate\Http\Request;
    use Illuminate\View\View;

    class UserController extends controller
    {
        public function show(Request $request, string $id)
        {
            // mengambil data session dari object request.
            $dataSession = $request->session()->get('key');

            ...
        }
    }

- Ketika kita mengambil data session, kita juga bisa menentukan nilai default saat menggunakan method 'get()' sebagai argument ke2.
- Nilai default ini akan di return ketika key yang ditentukan tidak ada di session.
- Jika kita memberikan closure function sebagai nilai defualt, maka ketika kunci yang ditentukan tidak ada, closure function ini akan dieksekusi dan hasilnya akan di return. contoh :

    $dataSession = $request->session()->get('key', 'default');

    $dataSession = $request->session()->get('key', function(){
        return 'default value from closure function.';
    });

# Global Helper Function session().
- Kita juga bisa menggunakan helper function session() untuk menyimpan ataupun mendapatkan data session.
- Ketika kita hanya memberikan satu argument berupa string ke function ini, maka dia akan mengembalikan nilai dari key(string) yang ditentukan.
- Kita juga bisa memberikan nilai default, dengan cara memberikan argument ke dua.
- Selanjutnya ketika kita memberikan argument berupa array assosiatif yang berisi pasangan key-value, maka dia akan menyimpan data tersebut ke dalam data session. dengan key sebagai key session dan value array sebagai value session. contoh :

    // Mengambil data session dengan key tertentu
    $dataSession = session('key');

    // Mengambil data session dengan key tertentu dan dengan nilai default jika key yang dicari tidak ditemukan.
    $dataSession = session('key', 'nilai_default');

    // Menyimpan data ke session
    session(['user_id' => '13']);

- Saat menggunakan function helper session() dan menggunakan object request untuk mendapatkan data session, terdapat sedikit perbedaan praktis, tapi kedua method ini dapat ditest menggunakan method assertSessionHas() yang tersedia di semua test kita.

# Mengambil semua data session
- Untuk mengambil semua data session kita bisa menggunakan method all(). contoh :

    $sessions = $request->session()->all();

# Mengambil Sebagian data session.
- Jika kita ingin mengambil sebagian data dari session, kita bisa menggunakan method only() atau except(). contoh :

    // method only hanya akan mengambil data session dengan key yang ditentukan, misalnya username dan id.
    $sessions = $request->session()->only(['username', 'id']);

    // method except akan mengambil semua data session kecuali key yang ditentukan. contoh kecuali  email,
    $sessions = $request->session()->except(['email']);

# Menentukan apakah sebuah item itu ada di session.
- Jika kita ingin memeriksa apakah suatu item itu ada / tidak di dalam session, kita bisa gunakan method has().
- Method ini akan mengembalikan true, jika item yang ditentukan ada, dan jika tidak akan mengembalikan null. contoh :

    // memeriksa apakah session punya item dengan key 'email'.
    if($request->session()->has('email')) {
        ...
    }

- Jika kita ingin memeriksa apakah sebuah item itu ada di dalam session, walaupun nilainya null, kita bisa gunakan method 'exists()'. contoh :

    if($request->session()->exists('username')) {

    }

- Selanjutnya jika kita ingin memeriksa apakah suatu item itu tidak ada di session, kita bisa gunakan method missing().
- Method ini akan mengembalikan true, jika item yang dicari tidak ada di session. contoh :

    if($request->session()->missing('id')) {
        ...
    }

# Menyimpan data ke Session
- Untuk menyimpan dara ke session kita bisa menggunakan method put() dari object  request ataupun global helper function session(). contoh :

    // menggunakan method put dari object request
    $request->session()->put(['key' => 'value']);

    // menggunakan global helper function session
    session(['key' => 'value']);

# Mendorong ke dalam nilai array dari session.
- Menggunakan method push() kita bisa mendorong nilai baru ke dalam nilai session yang berupa array.
- Sebagai contoh, misalkan key session 'user.team' berisi data array dari nama nama divisi / team, kita bisa menambahkan nilai baru ke dalam array tersebut.  contoh :

    $request->session()->push('user.item', 'web developers');

# Mengambil dan Menghapus item dari session.
- Dengan method pull kita bisa mengambil dan selanjutnya menghapus item dari session, hanya dengan satu statement. contoh :
- pada contoh berikut, laravel akan mengambil data di session dengan key 'id_order' dan kemudian menghapusnya dari session, dan jika tidak ada, maka nilai default '001' akan dikembalikan.

    $request->session()->pull('id_order', '001');

# Meningkatkan dan Menurunkan nilai session.
- Ketika data session kita berisi integer, mungkin kita ingin meningkatkan atau menurunkan nilainya.
- Kita bisa gunakan method increment() dan decrement(). contoh :

    // Meningkatkan nilai session dengan key 'count' 1 nilai
    $request->session()->increment('count');

    // Meningkatkan nilai session dengan key 'count' 2 nilai
    $request->session()->increment('count', $incrementBy = 2);

    // Menurunkan nilai session dengan key 'count' 1 nilai
    $request->session()->decrement('count');

    // Menurunkan nilai session dengan key 'count' 2 nilai
    $request->session()->decrement('count', $decrementBy = 2);

# Flash Data ke Session
- Ketika kita mungkin ingin menyimpan suatu item di session untuk request selanjutnya, kita bisa menggunakan method flash().
- Data yang disimpan menggunakan method ini akan segera tersedia pada request selanjutnya.
- Dan setelah request selanjutnya berakhir, maka data akan dihapus.
- Flashing data utamanya sangat berguna untuk pesan status short-lived. contoh :

    $request->session()->flash('status', 'Tugas sukses !');

- Jika kita harus mempertahankan semua data yang di flash untuk beberapa request, kita bisa menggunakan method reflash().
- Atau jika kita hanya ingin mempertahankan data tertentu saja yang di flash, kita bisa menggunakan method keep().

    // mempertahankan semua data yang di flash untuk beberapa request
    $request->session()->reflash();

    // mempertahankan data tertentu yang di flash untuk beberapa request
    $request->session()->keep('username', 'password');

- Jika ktia ingin mempertahankan data flash hanya pada request terkini saja, kita bisa gunakan method now(). contoh :

    $request->session()->now('status', 'Tugas sukses !');

# Menghapus Data Session.
- Selanjutnya ketika kita ingin menghapus sebagian data / item dari session, kita bisa menggunakan method forget().
- Jika ingin menghapus semua item / data dari session kita bisa gunakan method flush(). contoh :

    // menghapus item dengan key tertentu
    $request->session()->forget('id');
    $request->session()->forget(['id', 'email']);

    // menghapus semua item / data di session
    $request->session()->flush();

# Regenerating ID Session.
- Regenerate ID Session dilakukan untuk melindungi aplikasi laravel kita dari user jahat yang mencoba melakukan serangan fiksasi session ke aplikasi kita.
- Laravel secara otomatis melakukan regenerate ID Session selama authentikasi pada aplikasi laravel yang menggunakan starter kit atau Laravel Fortify.
